<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerUI</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>IsSelected = false;
UnitState = UNIT_STATE_CREATED;
MoveLocationX = -100;
MoveLocationY = -100;
depth = -100;
UnitOwner = noone;
UnitID = -1;
InAttackRange = false;
RightFacing = true;
KillMe = false;
TargetX = -100;
TargetY = -100;


//===================Left Facing=================//
LCreated = noone;
LStill = noone;
LIdle = noone;
LInRange = noone;
LForwardMove = noone;
LBackMove = noone;
LForwardAttack = noone;
LBackAttack = noone;
LTakeHit = noone;
LDie = noone;
LDead = noone;
//===================Left Facing=================//

//===================Right Facing=================//
RCreated = noone;
RStill = noone;
RIdle = noone;
RInRange = noone;
RForwardMove = noone;
RBackMove = noone;
RForwardAttack = noone;
RBackAttack = noone;
RTakeHit = noone;
RDie = noone;
RDead = noone;
//===================Right Facing=================//

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(KillMe)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(UnitState)
{
    case UNIT_STATE_CREATED: 
        // Just After Creation
        if(sprite_index != CreatedSprite)
        {
            sprite_index = CreatedSprite;
            break;
        }
        if(image_index == (sprite_get_number(sprite_index) - 1))
        {
            sprite_index = StillSprite;
            UnitState = UNIT_STATE_ACTIONOVER;
        }
        break;
    case UNIT_STATE_ACTIONOVER: 
        // Action Over. Unit just finished performing an action.
        if(++ActionDelay &gt;= 5)
        {
            UnitState = UNIT_STATE_IDLE;
            global.InAction = false;
            ActionDelay = 0;
        }
        break;
    case UNIT_STATE_IDLE: 
        if(sprite_index != IdleSprite)
        {
            sprite_index = IdleSprite;
        }
        // Idle Code If required
        break;
    case UNIT_STATE_MOVING:
        if(RightFacing)
        {
            if(x &gt; MoveLocationX)
            {
                if(sprite_index != BackMoveSprite)
                {
                    sprite_index = BackMoveSprite;
                    break;
                }
            }
            else if(x &lt; MoveLocationX)
            {
                if(sprite_index != ForwardMoveSprite)
                {
                    sprite_index = ForwardMoveSprite;
                    break;
                }
            }
        }
        else
        {
            if(x &gt; MoveLocationX)
            {
                if(sprite_index != ForwardMoveSprite)
                {
                    sprite_index = ForwardMoveSprite;
                    break;
                }
            }
            else if(x &lt; MoveLocationX)
            {
                if(sprite_index != BackMoveSprite)
                {
                    sprite_index = BackMoveSprite;
                    break;
                }
            }
        }
        // Movement Code
        if(mp_linear_step(MoveLocationX, MoveLocationY, MoveSpeed, false))
        {
            sprite_index = StillSprite;
            UnitState = UNIT_STATE_ACTIONOVER;
        }
        break;
    case UNIT_STATE_ATTACKING: 
        if(RightFacing)
        {
            if(x &gt; TargetX)
            {
                if(sprite_index != BackAttackSprite)
                {
                    sprite_index = BackAttackSprite;
                    break;
                }
            }
            else if(x &lt; TargetX)
            {
                if(sprite_index != ForwardAttackSprite)
                {
                    sprite_index = ForwardAttackSprite;
                    break;
                }
            }
        }
        else
        {
            if(x &gt; TargetX)
            {
                if(sprite_index != ForwardAttackSprite)
                {
                    sprite_index = ForwardAttackSprite;
                    break;
                }
            }
            else if(x &lt; TargetX)
            {
                if(sprite_index != BackAttackSprite)
                {
                    sprite_index = BackAttackSprite;
                    break;
                }
            }
        }
        if(image_index == (sprite_get_number(sprite_index) - 1))
        {
            sprite_index = StillSprite;
            UnitState = UNIT_STATE_ACTIONOVER;
        }
        break;
    case UNIT_STATE_INATTACKRANGE:
        if(sprite_index != InRangeSprite)
        {
            sprite_index = InRangeSprite;
        }
        break;
    case UNIT_STATE_TAKEHIT:
        if(sprite_index != TakeHitSprite)
        {
            sprite_index = TakeHitSprite;
            break;
        }
        if(image_index == (sprite_get_number(sprite_index) - 1))
        {
            if(UnitHealth &lt;= 0)
            {
                
            }
            else
            {
                sprite_index = StillSprite;
                UnitState = UNIT_STATE_IDLE;
            }
        }
        break;
    case UNIT_STATE_DIEING:
        if(sprite_index != DieSprite)
        {
            sprite_index = DieSprite;
            break;
        }
        if(image_index == (sprite_get_number(sprite_index) - 1))
        {
            UnitState = UNIT_STATE_DIE;
        }
        break;
    case UNIT_STATE_DIE:
        if(sprite_index != DeadSprite)
        {
            sprite_index = DeadSprite;
            break;
        }
        KillMe = true;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(!global.InAction)
{
    if(UnitState == UNIT_STATE_IDLE)
    {
        HighlightMoveRange(x,y,MoveRangeFrontBack,MoveRangeUpDown,MoveRangeDiagonal);
        IsSelected = true;
        global.SelectedUnit = instance_id;
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
