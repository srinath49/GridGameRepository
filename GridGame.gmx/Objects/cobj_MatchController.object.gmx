<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.InAction = false;
global.SelectedUnit = noone;
Match = noone;
MatchEngine = noone;
MatchID = -1;
Team = 0;
MyTurn = false;
ActionsLeft = 0;
CurrentAction = 0;
MatchState = MATCH_STATE_WAIT;
MatchRoom = lrm_level1;
Opponent = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(MatchState)
{
    case MATCH_STATE_NEW:
        room_goto(MatchRoom);
        MatchState = MATCH_STATE_POPULATE;
        break;
    case MATCH_STATE_POPULATE:
        PopulateMatch(true, id);
        break;
    case MATCH_STATE_INACTION:
        if(!global.InAction)
        {
            --controller.ActionsLeft;
            MatchState = MATCH_STATE_ACTIONOVER;
        }
        break;
    case MATCH_STATE_ACTIONOVER:
        if(controller.ActionsLeft &lt;= 0)
        {
            controller.ActionsLeft = 0;
            MatchState = MATCH_STATE_ENDTURN;
        }
        else
        {
            MatchState = MATCH_STATE_WAIT;
        }
        break;
    case MATCH_STATE_ENDTURN:
        {
            //var submit;
            //submit = show_question("No More Actions In This Turn. Do you want to Submit Turn? Click Yes to submit turn and No To reset turn");
            //if(submit)
            //{
                show_message("End Of Turn");
                MyTurn = false;
                SubmitTurn(id);
            //}
            //else
            //{
                //MyTurn = true;
                //ResetTurn();
            //}
            MatchState = MATCH_STATE_WAIT;
        }
        break;
    case MATCH_STATE_MYTURN:
        with(uobj_unit)
        {
            // Save positions etc.
        }
        MatchState = MATCH_STATE_WAIT;
        break;
    case MATCH_STATE_WAIT:
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
