<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MatchController = noone;
//ActionsList = ds_list_create();
Action1List = ds_list_create();
Action2List = ds_list_create();
Action3List = ds_list_create();
Action4List = ds_list_create();
//ds_list_add(ActionsList, Action1List);
//ds_list_add(ActionsList, Action2List);
//ds_list_add(ActionsList, Action3List);
//ds_list_add(ActionsList, Action4List);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(MatchController.MatchState == MATCH_STATE_WAIT)// &amp;&amp; (MatchController.MyTurn)
{
    if(!global.InAction)
    {   
        //Check UI First
        with(instance_position(mouse_x,mouse_y,uiobj_UI))
        {
            with(uiobj_UI)
            {
                Clicked = false;
                Now = false;
            }
            Clicked = true;
            Now = true;
            return true;
        }
        //============================================================//
        
        // Next Check Units
        with(instance_position(mouse_x,mouse_y,uobj_unit))
        {
            if(UnitOwner = global.username)
            {
                if(UnitState == UNIT_STATE_IDLE)
                {
                    global.SelectedUnit = id;
                    IsSelected = true;
                    HighlightMoveRange(x,y,MoveRangeFrontBack,MoveRangeUpDown,MoveRangeDiagonal);
                    HighlightEnemiesInRange(UnitRange);
                }
            }
            else if(UnitOwner == other.MatchController.Opponent)
            {
                if(InAttackRange)
                {
                    PerformAction(true, other.MatchController, MATCH_ACTION_ATTACKUNIT, global.SelectedUnit,id);
                }
                global.SelectedUnit.IsSelected = false;
                global.SelectedUnit = noone;
                with(pbobj_pathBlock)
                {
                    visible = false;
                }
            } 
            return true; 
        }
        //============================================================//
        
        // Now Check Pathblocks
        with(instance_position(mouse_x,mouse_y,pbobj_pathBlock))
        {
            if(visible)
            {
                if(!IsOccupied)
                {
                    if(!ignoreBlock)
                    {
                        PerformAction(true, other.MatchController, MATCH_ACTION_MOVEUNIT, global.SelectedUnit.UnitID, id.x, id.y, UNIT_MOVEMENT_SPEED);
                    }
                    pbobj_pathBlock.ignoreBlock = false;
                } 
                pbobj_pathBlock.visible = false;
            }
            else
            {
                if(!IsOccupied)
                {
                    if(instance_number(uiobj_UI) &gt; 0)
                    {
                        var create;
                        var creationPoint;
                        var unit;
                        unit = noone;
                        creationPoint = id;
                        create = false;
                        with(uiobj_UI)
                        {
                            if(Clicked)
                            {
                                create = true;
                                unit = UnitToCreate;
                                Clicked = false;
                            }
                        }
                        if(create)
                        {
                            PerformAction(true, other.MatchController, MATCH_ACTION_CREATEUNIT, creationPoint.x, creationPoint.y, unit, global.username, CreateUnitID(other.MatchController));
                            IsOccupied = true;
                        }
                    }
                }
            }
            return true;
        }
        //============================================================//
        
        // Reset the UI Buttons Clicked Values//
        with(uiobj_UI)
        {
            Clicked = false;
            Now = false;
        }
        //====================================//
        //============================================================//
        global.SelectedUnit = noone; // Reset Selected Unit to none
        with(pbobj_pathBlock) // Reset Path Blocks to Invisible
        {
            visible = false;
        }
        //============================================================//
        with(uobj_unit)
        {
            UnitState = UNIT_STATE_IDLE;
            InAttackRange = false;
        }
        return false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
