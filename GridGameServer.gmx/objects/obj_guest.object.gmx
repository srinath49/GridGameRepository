<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>socket = -1;
username = "";
password = "";
messageID = -1;
loggedIn = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if we have a new message and if the client is still connected
var size;
//Retrieve the amount of bytes that the buffer currently has
size=receivemessage(socket);
//If the amount of bytes is less than 0 exit, meaning that we don't have a new message
if (size&lt;0)
{
    exit;
}
//If the amount of bytes is higher than 0 go and process the package, meaning that we have a new message
else if (size&gt;0)
{
    //messageString = "Server : size = " + string(size);
    //show_message(messageString);
    event_user(0);
}
//If the amount of bytes equals 0 the client disconnected
else if (size=0)
{
    disconnect();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Read Package Identifier
messageID = readbyte();
switch (messageID){
    case 1:
         username = readstring();
         //uname = "Server : username = " + string(username);
         //show_message(uname);
         password = readstring();
         //pass = "Server : password = " + string(password);
         //show_message(pass);
         loggedIn = CheckLoginDetails(username, password);
         setnagle(socket, false);
         if(loggedIn)
         {
            clearbuffer();
            
            writebyte(ACCOUNT_LOGIN_SUCCESS);
            
            writebyte(true); // Lannisters Availability
            writebyte(true); // Starks Availability
            writebyte(false); // Targaryans Availability  
            writebyte(false); // Greyjoys Availability
            writebyte(false); // Baratheons Availability
            writebyte(false); // Arryns Availability
            writebyte(false); // Tyrells Availability
            writebyte(false); // Martells Availability
         
            sendmessage(socket);
            //show_message("Server : Messege Sent To Socket : "+string(socket));
            // Create Player Object
            {
                newPlayer = instance_create(x,y,obj_player);
                newPlayer.socket = socket;
                newPlayer.username = username;
                newPlayer.password = password;
                newPlayer.loggedIn = true;
                //show_message(newPlayer.username+"::Socket::"+string(newPlayer.socket));
            }
            instance_destroy();
         }
         else
         {
            clearbuffer();
            writebyte(ACCOUNT_LOGIN_FAIL);
            sendmessage(socket);
         }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
