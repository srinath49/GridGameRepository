<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>socket = -1;
username = "";
password = "";
messageID = -1;
loggedIn = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if we have a new message and if the client is still connected
var size;
//Retrieve the amount of bytes that the buffer currently has
size=receivemessage(socket);
//If the amount of bytes is less than 0 exit, meaning that we don't have a new message
if (size&lt;0)
{
    exit;
}
//If the amount of bytes is higher than 0 go and process the package, meaning that we have a new message
else if (size&gt;0)
{
    //messageString = "Server : size = " + string(size);
    //show_message("Server : Receive Size = " + string(size));
    event_user(0);
}
//If the amount of bytes equals 0 the client disconnected
else if (size=0)
{
    disconnect();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Read Package Identifier
messageID = readbyte();
//mstr = "Server : messageId = " + string(messageID);
//show_message(mstr);
switch (messageID)
{
    case GAME_MATCH_REQUEST:
        TempTeam = readbyte();
        TempId = readbyte();
        //show_message("Server::GAME_MATCH_REQUEST::TempTeam::"+string(TempTeam));
        newMatchRequest = instance_create(x,y,obj_matchRequest);
        newMatchRequest.player = id;
        newMatchRequest.username = id.username;
        newMatchRequest.team = TempTeam;
        newMatchRequest.userRequestId = TempId;
        //show_message("Server::GAME_MATCH_REQUEST::NewMatchRequestTeam::"+string(newMatchRequest.team));
        newMatchRequest.socket = id.socket;
        newMatchRequest.requestId = ds_list_size(global.matchRequestList);
        newMatchRequest.requestCreated = false;
        ds_list_add(global.matchRequestList, newMatchRequest);
        //show_message("Match Request Created for user : "+username);
        break;
    case MATCH_MSG_TURNSUBMIT:
        //show_message("Server::Recieved Message::Calling ProcessTurn()");
        ProcessTurn();
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
